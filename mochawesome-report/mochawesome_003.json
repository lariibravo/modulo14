{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-29T16:22:07.769Z",
    "end": "2022-11-29T16:22:08.545Z",
    "duration": 776,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ebae6427-2fe2-49c9-b7cb-c999a45c12b6",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 341,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO: \ncy.request('usuarios').then(response => {\n  return _usuario.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "48ee1a3d-ab24-4e24-abd3-0b99cd4e64bf",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n});",
              "err": {},
              "uuid": "935a2f10-09b0-41dc-b89e-a4681c457f90",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 68,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "e60e531e-a599-4fcc-b8cf-211ebec42737",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario(\"Larissa\", \"larissatestee@qa.com.br\", \"123\").then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "b4238bf6-0f62-4566-8ade-b5e3adf7e3e7",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 72,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "4462bd6a-3602-4851-82f4-e24241d943e6",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "a8a2050b-8806-4455-aa3f-5fac228757e2",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48ee1a3d-ab24-4e24-abd3-0b99cd4e64bf",
            "935a2f10-09b0-41dc-b89e-a4681c457f90",
            "e60e531e-a599-4fcc-b8cf-211ebec42737",
            "b4238bf6-0f62-4566-8ade-b5e3adf7e3e7",
            "4462bd6a-3602-4851-82f4-e24241d943e6",
            "a8a2050b-8806-4455-aa3f-5fac228757e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 675,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}