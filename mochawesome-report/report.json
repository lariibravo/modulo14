{
  "stats": {
    "suites": 6,
    "tests": 28,
    "passes": 27,
    "pending": 0,
    "failures": 1,
    "start": "2022-11-29T16:10:32.476Z",
    "end": "2022-11-29T16:22:21.363Z",
    "duration": 4177,
    "testsRegistered": 28,
    "passPercent": 96.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fbed3168-aa8c-43dc-a96f-34a8a625aefd",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f85d92f-a61e-4a93-a096-4a3bfbb98f44",
          "title": "Login - Teste da API ServeRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devo fazer login com sucesso",
              "fullTitle": "Login - Teste da API ServeRest Devo fazer login com sucesso",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"larissateste@qa.com.br\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "4f10d135-ef98-4a44-8309-c8b69b59912b",
              "parentUUID": "5f85d92f-a61e-4a93-a096-4a3bfbb98f44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f10d135-ef98-4a44-8309-c8b69b59912b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 286,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "406071e5-ac1a-49d9-a847-fa403cf57fdc",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "afbd93c9-303e-4270-a733-f0995ca95601",
          "title": "Teste da funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste da funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 236,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "f78a2d01-df45-4405-af55-dd33f969c692",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar Produtos",
              "fullTitle": "Teste da funcionalidade Produtos Listar Produtos",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'http://localhost:3000/produtos'\n}).then(response => {\n  // expect(response.body.produtos[0].nome).to.equal('Logitech MX Vertical')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(150);\n});",
              "err": {},
              "uuid": "95b473c5-cfdb-42da-ab66-5700d55eabde",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar Produto",
              "fullTitle": "Teste da funcionalidade Produtos Cadastrar Produto",
              "timedOut": null,
              "duration": 66,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 470,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 381\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "4c73ce53-38f3-4229-90a8-276d25a5360f",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar Produto Repetido",
              "fullTitle": "Teste da funcionalidade Produtos Deve validar mensagem de erro ao cadastrar Produto Repetido",
              "timedOut": null,
              "duration": 56,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProdutos(token, \"Produto EBAC 5566947\", 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "7c18a72e-148c-40c3-96fe-0cd4a757a2f4",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Teste da funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id; //  cy.log(response.body.produtos[0]._id)\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto editado 1\",\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "10267a9b-77ae-45a9-b5cc-8187ed5c500a",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado breviamente",
              "fullTitle": "Teste da funcionalidade Produtos Deve editar um produto cadastrado breviamente",
              "timedOut": null,
              "duration": 71,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000000)}`;\ncy.cadastrarProdutos(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "5a18d3c1-71c4-4867-831e-0eefd45c59a1",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto breviamente cadastrado",
              "fullTitle": "Teste da funcionalidade Produtos Deve deletar um produto breviamente cadastrado",
              "timedOut": null,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000000)}`;\ncy.cadastrarProdutos(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "ad610832-64bc-4b50-8e71-1570a86b0da6",
              "parentUUID": "afbd93c9-303e-4270-a733-f0995ca95601",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f78a2d01-df45-4405-af55-dd33f969c692",
            "95b473c5-cfdb-42da-ab66-5700d55eabde",
            "4c73ce53-38f3-4229-90a8-276d25a5360f",
            "7c18a72e-148c-40c3-96fe-0cd4a757a2f4",
            "10267a9b-77ae-45a9-b5cc-8187ed5c500a",
            "5a18d3c1-71c4-4867-831e-0eefd45c59a1",
            "ad610832-64bc-4b50-8e71-1570a86b0da6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 709,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ebae6427-2fe2-49c9-b7cb-c999a45c12b6",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 341,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO: \ncy.request('usuarios').then(response => {\n  return _usuario.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "48ee1a3d-ab24-4e24-abd3-0b99cd4e64bf",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n});",
              "err": {},
              "uuid": "935a2f10-09b0-41dc-b89e-a4681c457f90",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 68,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "e60e531e-a599-4fcc-b8cf-211ebec42737",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario(\"Larissa\", \"larissatestee@qa.com.br\", \"123\").then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "b4238bf6-0f62-4566-8ade-b5e3adf7e3e7",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 72,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "4462bd6a-3602-4851-82f4-e24241d943e6",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "a8a2050b-8806-4455-aa3f-5fac228757e2",
              "parentUUID": "dcd8604e-97dd-4350-b3ab-e20678f12ade",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48ee1a3d-ab24-4e24-abd3-0b99cd4e64bf",
            "935a2f10-09b0-41dc-b89e-a4681c457f90",
            "e60e531e-a599-4fcc-b8cf-211ebec42737",
            "b4238bf6-0f62-4566-8ade-b5e3adf7e3e7",
            "4462bd6a-3602-4851-82f4-e24241d943e6",
            "a8a2050b-8806-4455-aa3f-5fac228757e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 675,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c9baffa1-e459-4a04-a631-073c7915e957",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "de4c377f-256e-499a-86a6-c4b9e9064bc2",
          "title": "Login - Teste da API ServeRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devo fazer login com sucesso",
              "fullTitle": "Login - Teste da API ServeRest Devo fazer login com sucesso",
              "timedOut": null,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"larissateste@qa.com.br\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "c1d51901-f9e9-4152-8854-624eed7614c9",
              "parentUUID": "de4c377f-256e-499a-86a6-c4b9e9064bc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1d51901-f9e9-4152-8854-624eed7614c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1b971ecd-d9b6-43dd-b1c5-4f92e6f5b748",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
          "title": "Teste da funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste da funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "ee0c6e75-f04f-486a-bc64-c546e8f6ea14",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar Produtos",
              "fullTitle": "Teste da funcionalidade Produtos Listar Produtos",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'http://localhost:3000/produtos'\n}).then(response => {\n  // expect(response.body.produtos[0].nome).to.equal('Logitech MX Vertical')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(150);\n});",
              "err": {},
              "uuid": "aed50cb5-c754-400d-8537-268995c794e9",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar Produto",
              "fullTitle": "Teste da funcionalidade Produtos Cadastrar Produto",
              "timedOut": null,
              "duration": 131,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 470,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 381\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "bf9c2b61-c497-4fc3-8846-fafa50473e6d",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar Produto Repetido",
              "fullTitle": "Teste da funcionalidade Produtos Deve validar mensagem de erro ao cadastrar Produto Repetido",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProdutos(token, \"Produto EBAC 5566947\", 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "72b5c063-321b-4681-bdea-bf885a56494a",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Teste da funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id; //  cy.log(response.body.produtos[0]._id)\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto editado 1\",\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "9a542832-ecb4-41cc-9fcb-2519e13b8e84",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado breviamente",
              "fullTitle": "Teste da funcionalidade Produtos Deve editar um produto cadastrado breviamente",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000000)}`;\ncy.cadastrarProdutos(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "3614e488-53b4-40a7-b6b9-d244b2e4c4f6",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto breviamente cadastrado",
              "fullTitle": "Teste da funcionalidade Produtos Deve deletar um produto breviamente cadastrado",
              "timedOut": null,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000000)}`;\ncy.cadastrarProdutos(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "5457b7d0-2dc4-4986-bc93-0476fc704d6b",
              "parentUUID": "93ab4c5b-1c2c-4b11-a281-2e7c3ff3c1a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee0c6e75-f04f-486a-bc64-c546e8f6ea14",
            "aed50cb5-c754-400d-8537-268995c794e9",
            "bf9c2b61-c497-4fc3-8846-fafa50473e6d",
            "72b5c063-321b-4681-bdea-bf885a56494a",
            "9a542832-ecb4-41cc-9fcb-2519e13b8e84",
            "3614e488-53b4-40a7-b6b9-d244b2e4c4f6",
            "5457b7d0-2dc4-4986-bc93-0476fc704d6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 556,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9046601a-61f6-475b-8a99-bdeb829fe442",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "42379609-b926-4269-91ef-240a4324af37",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO: \ncy.request('usuarios').then(response => {\n  return _usuario.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "4e98b761-42fb-4d3d-b8e3-97d8fd8b7db2",
              "parentUUID": "42379609-b926-4269-91ef-240a4324af37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 223,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n});",
              "err": {},
              "uuid": "87213ed1-088f-4a10-bdd2-43cbf99335ec",
              "parentUUID": "42379609-b926-4269-91ef-240a4324af37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let email = _faker.faker.internet.email();\ncy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "c8f0fd6f-17be-4a19-af20-5aeb282347be",
              "parentUUID": "42379609-b926-4269-91ef-240a4324af37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario(\"Larissa\", \"larissatestee@qa.com.br\", \"123\").then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "7cbc448c-7587-44ad-aeb5-20525e531605",
              "parentUUID": "42379609-b926-4269-91ef-240a4324af37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "3e0d98d8-ba5b-42f4-a89d-ef88a12f00ed",
              "parentUUID": "42379609-b926-4269-91ef-240a4324af37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 965,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario(\"Larissa teste\", email, \"123\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {
                "message": "AssertionError: expected 'Nenhum registro excluído' to equal 'Registro excluído com sucesso'",
                "estack": "AssertionError: expected 'Nenhum registro excluído' to equal 'Registro excluído com sucesso'\n    at Context.eval (webpack:///./cypress/e2e/exercicio-api.cy.js:82:49)",
                "diff": "- 'Nenhum registro excluído'\n+ 'Registro excluído com sucesso'\n"
              },
              "uuid": "719a8f76-69bb-4745-b1b9-cfa50fa036d3",
              "parentUUID": "42379609-b926-4269-91ef-240a4324af37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e98b761-42fb-4d3d-b8e3-97d8fd8b7db2",
            "87213ed1-088f-4a10-bdd2-43cbf99335ec",
            "c8f0fd6f-17be-4a19-af20-5aeb282347be",
            "7cbc448c-7587-44ad-aeb5-20525e531605",
            "3e0d98d8-ba5b-42f4-a89d-ef88a12f00ed"
          ],
          "failures": [
            "719a8f76-69bb-4745-b1b9-cfa50fa036d3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1846,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}